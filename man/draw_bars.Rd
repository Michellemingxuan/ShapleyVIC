% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/summarise_visualise.R
\name{draw_bars}
\alias{draw_bars}
\title{Draw bar plot for model reliance.}
\usage{
draw_bars(
  val,
  val_sd = NULL,
  val_lower = NULL,
  val_upper = NULL,
  var_names = NULL,
  title = NULL,
  subtitle = NULL
)
}
\arguments{
\item{val}{A numeric vector of model reliance.}

\item{val_sd}{A numeric vector of standard deviations of model reliance (with
the same length as \code{val}), if available. Alternatively, provide
\code{val_lower} and \code{val_upper} instead of \code{val_sd} to reflect
uncertainty in \code{val}.}

\item{val_lower}{A numeric vector of the lower bound of 95\% confidence
interval of model reliance (with the same length as \code{val}), if
available.}

\item{val_upper}{A numeric vector of the upper bound of 95\% confidence
interval of model reliance (with the same length as \code{val}), if
available.}

\item{var_names}{A factor or string vector of variable names (with the same
length as \code{val}). If a factor is provided, variables will be plotted
as ordered in \code{levels(var_names)}, otherwise variables will be ordered
by \code{val}. If unspecified, variables will be named 'X1', 'X2', etc.}

\item{title}{Title of the bar plot (optional).}

\item{subtitle}{Subtitle of the bar plot (optional).}
}
\value{
Returns a ggplot object for the bar plot.
}
\description{
Draw bar plot for model reliance.
}
\examples{
data("df_compas", package = "ShapleyVIC")
head(df_compas)
# The following requires python libraries sage and sklearn, otherwise NULL is
# returned. Small training and test sets are used to reduce run time.
m_optim <- ShapleyVIC::logit_model_python(x_train = df_compas[1:1000, 2:7],
                                          y_train = df_compas$y[1:1000])
if (!is.null(m_optim)) {
  vals <- ShapleyVIC::compute_sage_value(
    model_py = m_optim,
    var_names = c("Age", "Race", "Prior criminal history", "Gender",
                  "Juvenile criminal history", "Current charge"),
    x_test = df_compas[1001:1100, 2:7],
    y_test = df_compas$y[1001:1100]
  )
  ShapleyVIC::draw_bars(val = vals$sage_value, val_sd = vals$sage_sd,
                        var_names = vals$var_name)
}
}
