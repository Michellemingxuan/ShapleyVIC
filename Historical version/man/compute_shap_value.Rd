% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/compute_shap.R
\name{compute_shap_value}
\alias{compute_shap_value}
\title{Compute SHAP values for a model}
\usage{
compute_shap_value(
  model_py,
  x_test,
  var_names = NULL,
  plot = TRUE,
  left = 0.3,
  right = 0.7,
  top = 0.8,
  bottom = 0.1
)
}
\arguments{
\item{model_py}{A Python callable model object that has a
\code{predict_proba} function.}

\item{x_test}{A \code{data.frame} of predictors from the test set. Make sure
categorical variables are properly encoded as factors.}

\item{var_names}{String vector of variable names (not the names of regression
coefficients, if categorical variables are involved). If unspecified,
column names of \code{x_test} will be used.}

\item{plot}{Whether to plot SHAP values (default is \code{TRUE}).}

\item{left}{Numeric values between 0 and 1 controlling the boundaries of bar
and beeswarm plots. The complete plotting region has a width and height of
1, and the bottom left corner is (0,0). Default parameters \code{(left =
0.3, right = 0.7, top = 0.8, bottom = 0.1)} means margins of 0.3 at left
and right sides, and margins of 0.1 on the top and bottom.}

\item{right}{See \code{left}.}

\item{top}{See \code{left}.}

\item{bottom}{See \code{left}.}
}
\value{
Returns a \code{data.frame} of SHAP values, where each column
  corresponds to a variable and each row corresponds to an observation. SHAP
  value of a categorical variable is the sum of SHAP values for all
  categories. Plots a bar plot of mean absolute SHAP values and a beeswarm
  plot of SHAP values (note that these plots do not work with RMarkdown yet).
  Users can save the two plots to an external PDF file by using the
  \code{pdf()} function (see Example section). Categorical variables are
  converted to integer values (i.e., 1 for first category, 2 for second
  category, etc) when plotting in the beeswarm plot.
}
\description{
Compute SHAP values for a model
}
\examples{
data("df_compas", package = "ShapleyVIC")
head(df_compas)
# The following requires python libraries shap, sklearn and numpy,
# otherwise NULL is returned. Small training and test sets are used to reduce
# run time.
m_optim <- ShapleyVIC::logit_model_python(x_train = df_compas[1:1000, 2:7],
                                          y_train = df_compas$y[1:1000])
if (!is.null(m_optim)) {
  # pdf("shap_figures.pdf") # Add this to save the two SHAP plots to a PDF file
  shap_vals <- ShapleyVIC::compute_shap_value(
    model_py = m_optim,
    var_names = c("Age", "Race", "Prior criminal history", "Gender",
                  "Juvenile criminal history", "Current charge"),
    x_test = df_compas[1001:1100, 2:7],
    plot = FALSE # Change to `plot = TRUE` to plot SHAP values
  )
  # dev.off()
  dim(shap_vals)
  head(shap_vals)
}
}
